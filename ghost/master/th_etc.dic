OnFileDrop2{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext{
		when ".jpg", ".jpeg", ".bmp", ".png"{
			Wallpaperfile = reference0
			
			"\0\s[0]The file you dropped is %(_filename)%(_fileext).\w8How would you like me to set this picture as your wallpaper?\n\n[half]/
			\![*]\q[Centered,SetWallpaper_0]\n/
			\![*]\q[Tiled,SetWallpaper_1]\n/
			\![*]\q[Stretched,SetWallpaper_2]\n\n[half]/
			\![*]\q[No thanks,SetWallpaper_Cancel]\e"
		}when ".mid", ".wav", ".mp3", ".wma", ".au"{
			"\0\s[0]%(_filename)%(_fileext) is a music file.\e"
		}others{
			"\0\s[0]This is %(_filename)%(_fileext).\e"
		}
	}
}

Select.SetWallpaper_0{
	"\![set,wallpaper,%(Wallpaperfile),center]\0\s[0]The image is centered.\e"
}Select.SetWallpaper_1{
	"\![set,wallpaper,%(Wallpaperfile),tile]\0\s[0]The image is tiled.\e"
}Select.SetWallpaper_2{
	"\![set,wallpaper,%(Wallpaperfile),stretch]\0\s[0]The image is stretched.\e"
}Select.SetWallpaper_Cancel{
	"\0\s[0]Setting wallpaper cancelled.\e"
}

OnInstallBegin {
	"\0\s[0]This is the beginning dialogue for installing a file.\w8This zip or nar contains an install.txt file.\e"
}

OnInstallComplete {
	"\0"
 	--
	if reference0 == "shell"{	
		if reference1 == "Hypothetical Shell that doesn't actually exist"{
			"\s[0]I have installed Hypothetical Shell.\w8Truncated for space.\e"
		}elseif reference1 == "Another totally real shell wow"{
			"\s[0]I have installed another totally real shell.\e"
		}else{
		"\s[0]I have installed a new shell.\w8It's called  %(reference1).\e"
		}
 	}elseif reference0 == "ghost"{
		"\s[0]A new ghost has been installed. It's called %(reference1).\e"
 	}elseif reference0 == "balloon"{
		"\s[0]We've installed a new balloon.\w8It's called %(reference1).\e"
 	}elseif reference0 == "plugin"{
		"\s[0]We've installed a plug-in.\w8It's called %(reference1).\e"
 	}elseif reference0 == "calendar skin" {
		"\s[0]We've installed a calendar skin.\w8It's called %(reference1)."
	}elseif reference0 == "headline"{
		"\0\s[0]We've set up a headline.\w8It's called %(reference1).\e"
	}elseif reference0 == "rss" {
		"\0\s[0]We've set up a headline.\w8It's called %(reference1).\e"
	}else{
		"\s[0]We installed %(reference1)."
	}
}

OnInstallFailure {
	"\0\s[0]The installation has failed.\n\n[half]\w5"
	--
	if reference0 == "unsupported"{
		"I can't deliver this\e"
	}elseif reference0 == "extraction" {
		"The file could not be extracted properly.\e"
	}
 }

OnInstallRefuse {
	"\0\s[0]I can't install this. \w4It may be for %(reference0) instead.\e"
}

OnVanishSelecting{
	"\0\s[0]Why do you want to uninstall me...\w8\e"
}

OnVanishSelected{
	"\0\s[0]Bye...\w8I hope I can come back soon!\w9\w9\e"
}

OnVanishCancel{
	"\0\s[0]Yay, I can stay! I promise to do my best!\e"
}

OnVanishButtonHold {
	"\0\s[0]This dialogue displays when the user double clicks on the balloon when we're saying we're going to uninstall ourselves.\e"
}

OnVanished {
	"\0\s[0]%(reference0) has been uninstalled.\w8Bye!.\e"
}

//TODO Implement mail delivery dialogue
OnBIFFBegin {
	"\0\s[0]I'm going to get your mail! Just leave it to me.\e"
}
 
OnBIFFComplete {
	if reference0 == 0 {
 		"\0\s[0]There is no new mail.\e"
	}elseif reference0 == 1 {
 		"\0\s[0]There is one new email.\e"
	}elseif reference0 > 1 && reference0 < 11{
		"\0\s[0]There are %(reference0) emails.\e"
	}elseif reference0 > 100{
		"\0\s[0]There are %(reference0) emails unread.\w8Woah.\e"
	}else{
		"\0\s[0]There are %(reference0) emails.\e"
 	}
}

OnBIFFFailure {
	if reference0 == "timeout" {
 		"\0\s[0]The connection has timed out.\e"
	}elseif reference0 == "kick"{
		"\0\s[0]I can't access the account.\e"
 	}elseif reference0 == "defect"{
 		"\0\s[0]The email account was not set up properly.\w8It can be reset at the POP menu.\w8\![open,configurationdialog]\e"
	}else{
		"\0\s[0]I can't connect to the account.\w8The error returned is '%(reference[0])'.\e"
	}
}
 
OnUpdateBegin {
	"\0\s[0]Starting the update process.\w8\e"
 }

OnUpdateReady { 
	reference0++
    "\0\s[0]There are %(reference0) new files.\w8\e"
 }

OnUpdateComplete {
	if reference0 == "none" {
 		"\0\s[0]There are no new files.\e"
		"\0\s[0]This is another message about there being no new files to update with.\e"
	}else{
		"\0\s[0]Update successful!\e"
 	}
}

OnUpdateFailure {
	if reference0 == "timeout" {
 		"\0\s[0]The update connection has timed out.\e"
	}elseif reference0 == "md5 miss" {
		"\0\s[0]The MD5 hash of the files don't match.\e"
 	}else {
 		"\0\s[0]The update could not be completed.\w8The error is '%(reference0)'.\e"
	}
 }
 
OnUpdate.OnDownloadBegin {
 	if "aitalk" _in_ reference0 {
 		"\0\s[0]We are going to download more dialogue.\w8It's in the aitalk file.\e"
 	}else{
	"\0\s[0]This is dialogue for finding a new file.\e"
	"\0\s[0]This is another bit of dialogue for finding a new file.\e"
	}
 }

OnUpdate.OnMD5CompareBegin {
	"\0\s[0]Checking the MD5 value.\e"
}
 
OnUpdate.OnMD5CompareComplete {
	"\0\s[0]MD5 check good.\e"
}

OnUpdate.OnMD5CompareFailure {
	"\0\s[0]The MD5 values don't match.\w8\e"
 }

OnHeadlinesenseBegin {
	"\0\s[0]You've selected %(reference0).\e"
 }

OnHeadlinesense.OnFind {
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		"\0\b2\s[0]%(reference0):"
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		"\0\b2\s[0]%(reference0):"
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		"\0\b2\s[0]%(reference0):"
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*]\q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
	"\0\s[0]Headline viewing complete.\e"
	//Actually I take that back, you can change this line of dialogue here for when you're done looking at a headline to something else if you want.
}

 //---- OnHeadlinesenseComplete -------------------------------------------------------
 //This is an odd function. As far as I can gather, this is if the headline information gathering was successful, but there's no new information to report. Possibly if none of the feeds have updated? I'm a little fuzzy on this one.
 
OnHeadlinesenseComplete
 {
	"\0\s[0]No update. %(reference0).\e"
	//reference0 here supposedly always stores the value no update? Again this isn't hugely clear from what I can see. Anyway, this dialogue has never come up for me while using a ghost, so perhaps someone else who runs into it can offer more clarity. For now, you can leave it as is, or write up something else in here if you like.
 }

 //---- OnHeadlinesenseFailure ---------------------------------------------------------
 //This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.
 
OnHeadlinesenseFailure
  {
	"\0\s[0]The feed can't updated."
 	--
	if reference0 == "can't download" //if they can't download the rss feed for some reason
 	{
		"It can't be downloaded."
 	}
	elseif reference0 == "can't analyze" //if they can't read the file for some reason
 	{
		"It can't be analyzed."
 	}
	else //other errors
 	{
		"I don't know."
 	}
	--
 	"\e" //And here is the final /e, so you don't need to include it in the if statements above. Another one of the very rare cases this occurs.
}


//**** Ghost Creation and Updating ******************************************************
//These next few are related to creating updates2.dau and .nar files for your ghosts. You'll want to at least make a .nar to distribute your ghost, and if you're going to be using Network Update, you'll also want to make updates2.dau as well. It's unlikely that anyone other than you will see these messages, but you should be thorough and replace them anyway.
//Primarily, you will see these messages when you're creating your updates file or updating your ghost.nar file. More on this on the walkthrough page. However, you can drag and drop another ghost's folder onto them and they'll also create a nar for that as well, if for some reason you want to do that.


 //---- OnUpdatedataCreating -----------------------------------------------------------
 //This will begin the creation of the updates2.dau file. Not unlike the other beginning functions you've seen throughout this file. Replace with whatever you like.
 
OnUpdatedataCreating
 {
	"\0\s[0]Creating the updates2.dau file.\e"
 }

 //---- OnUpdatedataCreated -------------------------------------------------------------
 //After the updates2.dau file has been successfully created. Replace with whatever.
 
OnUpdatedataCreated
 {
	"\0\s[0]Successfully created updates2.dau.\e"
 }

 //---- OnNarCreating ------------------------------------------------------------------
 //Along the same lines, this is when they begin creating a .nar file for your ghost. .nars are the format most ghosts will be in, something similar to a .zip file, and this is the format you'll be distributing your ghost in most likely. Replace the dialogue with whatever you like.
 
OnNarCreating
 {
	"\0\s[0]Creating the .nar file.\e"
 }

 //---- OnNarCreated -------------------------------------------------------------------
 //After the nar file has been successfully created.
 
OnNarCreated
 {
	"\0\s[0]Successfully created '%(reference0)'.\e"
	//reference0 here will be the filename of the nar you just created. It should drop the nar in the folder where all your ghosts are listed, ssp\ghost\.
 }

 //****　Clock Synchronization　**********************************************************
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//This set of functions was done by the above Korean coder, I think. I'll leave their comment there untouched. 
//If you right click your ghost and go into the Utilities menu, there's an option called NTP Time Sync. That's what this is for!
 

 //----OnSNTPBegin ------------------------------------------------------------------
 //As with the others you've seen above, this is the beginning bit of dialogue for this process.
 
OnSNTPBegin
 {
	"\0\s[0]I'm going to check the time.\w9Connecting to %(reference0).\e"
	//%(reference0) here is the site they'll be using to check your clock. I wouldn't worry too much about what the site is or where it's defined, it should be accurate. Replace the dialogue with what you need, you don't have to use reference0 if you don't want to.
 }


 //----　OnSNTPCompare----------------------------------------------------------
 //Now the ghost is going to compare the current time of your computer's system to the time of the site they connected to. Most of this you don't have to touch, just replace the dialogue as indicated.
 
OnSNTPCompare
 {
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n/
 	\n"
	--
 	if reference3 == 0 //if your clock is already accurate.
	{
 		"\0\s[0]Your clock is accurate.\e" //replace this with whatever message you like.
	}
 	else //if your clock doesn't match
	{
	//you can redo this top line up to the \n\n[half] part, but leave the \q options alone.
 		"\0\s[0]Your clock doesn't match.\w6\nShould we fix it?\n\n[half]/
		\![*]\q[Fix it,OnSNTPEXECUTE]\n/
 		\![*]\q[Leave it alone,OnSNTPCANCEL]\e"
	}
 }

 //----　OnSNTPEXECUTE ------------------------------------------------------------------
 //After they've fixed your clock. Note the \6 tag - that's what actually changes the clock. Do not remove that tag. Replace the rest with what you want.
 
OnSNTPEXECUTE
 {
	"\0\s[0]The clock has been fixed.\6\e"
 }

 //----　OnSNTPCANCEL ------------------------------------------------------------------
 //If you decide not to change your clock when they tell you it doesn't match. Replace with what you want.
 
OnSNTPCANCEL
 {
	"\0\s[0]The user decided not to change the clock.\e"
 }

 //----　OnSNTPFailure ------------------------------------------------------------------
 //If they can't change the clock for some reason, possibly because the site timed out but it could be anything. Replace with what you want.
 
OnSNTPFailure
 {
	"\0\s[0]The clock wasn't changed.\w8Something went wrong.\e"
 }


 //--OnDisplayChange----------------------------------------------------------------
 //This is when you change the resolution of your monitor while your ghost is running. Don't mess with any of this, it should be fine as is.
 
OnDisplayChange
 {
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
 }



 //---- OnScreenSaverStart -------------------------------------------------------
 //This happens if your ghost is running when your screensaver starts up. I've never got this to trigger but I love this idea, and I feel like there's a way to do it I haven't figured out yet. So you can skip these for now if you want, but if I do ever get it working, I'll come back and make a note of it.
 
OnScreenSaverStart
 {
	"\0\s[0]The screensaver is starting.\w7Wiggle your mouse!\e"
	//Replace with what you want.
 }

 //---- OnScreenSaverEnd -------------------------------------------------------
 //When you wiggle your mouse and stop your screensaver.
 
OnScreenSaverEnd
 {
	"\0\s[0]The screensaver is gone.\e"
	//Replace with what you want.
 }


 //---- OnApplicationBoot ---------------------------------------------------------------
 //This supposedly is for when a program starts but I have honestly never gotten it to work or seen it happen. I wouldn't sweat these three related functions too much.
 
OnApplicationBoot
 {
	"\0\s[0]%(reference0) just started.\e"
 }

 //---- OnApplicationClose --------------------------------------------------------------
 //See above, but for the program closing.
 
OnApplicationClose
 {
	"\0\s[0]%(reference0) has closed.\e"
 }

 //---- OnApplicationFileOpen ----------------------------------------------------------
 //I believe this is for when the program detailed above opens a document file of some kind.
 
OnApplicationFileOpen
 {
	"\0\s[0]Opening %(reference1).\e"
 }




 //---- OnBatteryLow -----------------------------------------------------------------
 //This is for when your laptop's battery is low. I don't have a laptop, so I've never really been able to test this. Perhaps someone with a laptop can report back to me with more details about the battery related functions?
 
OnBatteryLow
 {
	"\0\s[0]Your computer's battery is low. \w8\0\s[0]There is %(reference0) power left.\e"
	//reference0 here is the amount of battery power. Replace as you like.
 }
 
 //--OnBatteryCritical-----------------------------------------------------------------
 //Likewise, this is for if your battery is REALLY low. Replace as you like.
 
OnBatteryCritical
{
	"\0\s[0]The laptop's battery is critically low.\e"
}
 
//--OnBatteryNotify--------------------------------------------------------------------
//This I believe checks to see if your laptop is plugged in or not. Originally this bit of code was commented out, so I suspect it may not work. It may need a plug-in of some sort. Either way, you can delete it or fill it out as you like.
//Actually investigating this, leaving this in makes it so the ghost updates you about whether or not your computer is plugged-in constantly, which makes no sense for desktops. No doubt why it was commented out. You can delete it or just leave it be.

/*
OnBatteryNotify
{
	if reference2 == "online" //If your laptop is plugged in
	{
		"\0\s[0]The laptop is plugged in.\e"
	}
	elseif reference2 == "offline" //If you unplug your laptop
	{
		"\0\s[0]The computer is not plugged in.\w8\0\s[0]Watch your battery.\e"
	}
}
*/


 //--OnShellScaling
 //This is a function however that you may actually use! Or at least, I often use it when desktop space is at a premium (which it always is on my computer). If you right click the ghost, you can go to Shell Scaling, which lists a number of different percentages. Those are the percentages your ghost can be scaled in size up or down. You can try them out yourself to get an idea of what I mean. I often scale mine down to get them out of the way sometimes. This adds dialogue whenever you change their scale. You don't have to do this if you don't want to, in which case they will just stay silent when you size them up or down. If that's what you want, just delete the whole thing or leave "" instead of any dialogue.
 
OnShellScaling
{
	if reference0 >= 150 //this number is the percentage that you're scaling the ghost up to. In this case, it's 150%.
	{
		"\0\s[0]I am now 150% our original size.\w8Bigger.\e"
	}
	elseif reference0 == 100 //this is 100%
	{
		"\0\s[0]I am normal sized.\e"
	}
	elseif reference0 == 50 //this is 50%. You can add any percentage that's listed under shell scaling if you want using more elseifs.
	{
		"\0\s[0]I am now 50% our original size.\e"
	}
}